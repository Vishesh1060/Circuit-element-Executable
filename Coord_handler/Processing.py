import cv2  
import numpy as np
import csv
import os
import json
import Image_handler as Ih

(imgData,i,j)=({},-1,-1)
jsout_dir='../out_json/'

file=csv.reader(open('../Mlv2/out_imgs/sv_ (60).csv','r'))
imdir='../MLv2/imgs/sv_ (60).jpg'
#Base json template
jsout={
    "Jinja": {
        "template": ""
    },
    "generic_present": False,
    "entity_name":"entity",
    "LRGates": {
    #in the form G1:[i1,i2], G2:[i2,i3], "G3": ["G1","G2"]
    },
    "Gates": [],
    #in the form [G1,G2,G3] 
    "Types": {
        #in the form "G1": { "type": "AND","in": 2,"out": 1},
    },
    "Terminals": {
        #in the form "in": 4, "out": 1
    },
    "Link": {
        #Generated by Code generator
    }
    
}


#CSV parser

for L in file:
    i+=1
    if i==0:
        for key in L:
            if key not in imgData:
                imgData[key]=[]
    else:
        j=-1        
        kl=list(imgData.keys())
        for value in L:
            j+=1
            if value.isnumeric():
                imgData[kl[j]].append(int(value))
            elif kl[j]=="rectangle_top_left" or kl[j]=="rectangle_bottom_right":
                strval=value.strip("()").split(',')
                inttupval=(int(strval[0]),int(strval[1]))
                imgData[kl[j]].append(inttupval)
            else:
                imgData[kl[j]].append(value)
                
#key values are ['img_height', 'img_width', 'img_channels', 'element_name', 'confidence', 'rectangle_top_left', 'rectangle_bottom_right']
##includes Code for converting string in csv to int

def image_assign_gateid(imgData):
    Gates=[]
    Types={}
    for i in range(len(imgData['element_name'])):
        if imgData['element_id'][i][0]=='G':
            Gates.append(imgData['element_id'][i])
            Types.update({imgData['element_id'][i]:{"type":imgData['element_name'][i],"in":-1,"out":1}})
        else:
            pass
    return (Gates,Types)




#resizing for visibility

blank_image = np.zeros((imgData['img_height'][0],imgData['img_width'][0],imgData['img_channels'][0]), dtype=np.uint8)
im2=cv2.imread(imdir)
im3=cv2.imread(imdir)

blank_image = Ih.image_resize(blank_image, width=1000)
blank_image = Ih.image_label_all(blank_image,imgData)
im3 = Ih.image_resize(im3, width=1000)
im2 = Ih.image_resize(im2, width=1000)


Ih.image_percent_overlap(imgData)

(lower,upper)=Ih.image_dominant_color(im3)
for elem in imgData['element_id']:
    print(elem,'Removed')
    im3=Ih.image_remove_element(im3,imgData,elem,1)

im3 = Ih.image_label_all(im3,imgData)

cv2.imshow('window',blank_image)
cv2.imshow('window2',im2)
cv2.imshow('window3',im3)
cv2.waitKey()



'''
(Gates,Types)=image_assign_gateid(imgData)
jsout["Types"].update(Types)
jsout["Gates"].extend(Gates)
json_object = json.dumps(jsout, indent=4)
with open(str(jsout_dir+"data.json"), "w") as outfile:
   outfile.write(json_object)
 '''